// automatically generated by rust-bindgen 0.61.0

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_authentication {
    _unused: [u8; 0],
}
pub type pulsar_authentication_t = _pulsar_authentication;
pub type token_supplier = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char,
>;
extern "C" {
    pub fn pulsar_authentication_create(
        dynamicLibPath: *const ::std::os::raw::c_char,
        authParamsString: *const ::std::os::raw::c_char,
    ) -> *mut pulsar_authentication_t;
}
extern "C" {
    pub fn pulsar_authentication_tls_create(
        certificatePath: *const ::std::os::raw::c_char,
        privateKeyPath: *const ::std::os::raw::c_char,
    ) -> *mut pulsar_authentication_t;
}
extern "C" {
    pub fn pulsar_authentication_token_create(
        token: *const ::std::os::raw::c_char,
    ) -> *mut pulsar_authentication_t;
}
extern "C" {
    pub fn pulsar_authentication_token_create_with_supplier(
        tokenSupplier: token_supplier,
        ctx: *mut ::std::os::raw::c_void,
    ) -> *mut pulsar_authentication_t;
}
extern "C" {
    pub fn pulsar_authentication_basic_create(
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> *mut pulsar_authentication_t;
}
extern "C" {
    pub fn pulsar_authentication_athenz_create(
        authParamsString: *const ::std::os::raw::c_char,
    ) -> *mut pulsar_authentication_t;
}
extern "C" {
    pub fn pulsar_authentication_oauth2_create(
        authParamsString: *const ::std::os::raw::c_char,
    ) -> *mut pulsar_authentication_t;
}
extern "C" {
    pub fn pulsar_authentication_free(authentication: *mut pulsar_authentication_t);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pulsar_logger_level_t {
    pulsar_DEBUG = 0,
    pulsar_INFO = 1,
    pulsar_WARN = 2,
    pulsar_ERROR = 3,
}
pub type pulsar_logger = ::std::option::Option<
    unsafe extern "C" fn(
        level: pulsar_logger_level_t,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_client_configuration {
    _unused: [u8; 0],
}
pub type pulsar_client_configuration_t = _pulsar_client_configuration;
extern "C" {
    pub fn pulsar_client_configuration_create() -> *mut pulsar_client_configuration_t;
}
extern "C" {
    pub fn pulsar_client_configuration_free(conf: *mut pulsar_client_configuration_t);
}
extern "C" {
    pub fn pulsar_client_configuration_set_auth(
        conf: *mut pulsar_client_configuration_t,
        authentication: *mut pulsar_authentication_t,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_set_memory_limit(
        conf: *mut pulsar_client_configuration_t,
        memoryLimitBytes: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_get_memory_limit(
        conf: *mut pulsar_client_configuration_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn pulsar_client_configuration_set_operation_timeout_seconds(
        conf: *mut pulsar_client_configuration_t,
        timeout: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_get_operation_timeout_seconds(
        conf: *mut pulsar_client_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_client_configuration_set_io_threads(
        conf: *mut pulsar_client_configuration_t,
        threads: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_get_io_threads(
        conf: *mut pulsar_client_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_client_configuration_set_message_listener_threads(
        conf: *mut pulsar_client_configuration_t,
        threads: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_get_message_listener_threads(
        conf: *mut pulsar_client_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_client_configuration_set_concurrent_lookup_request(
        conf: *mut pulsar_client_configuration_t,
        concurrentLookupRequest: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_get_concurrent_lookup_request(
        conf: *mut pulsar_client_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_client_configuration_set_logger(
        conf: *mut pulsar_client_configuration_t,
        logger: pulsar_logger,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_set_use_tls(
        conf: *mut pulsar_client_configuration_t,
        useTls: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_is_use_tls(
        conf: *mut pulsar_client_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_client_configuration_set_tls_trust_certs_file_path(
        conf: *mut pulsar_client_configuration_t,
        tlsTrustCertsFilePath: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_get_tls_trust_certs_file_path(
        conf: *mut pulsar_client_configuration_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_client_configuration_set_tls_allow_insecure_connection(
        conf: *mut pulsar_client_configuration_t,
        allowInsecure: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_is_tls_allow_insecure_connection(
        conf: *mut pulsar_client_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_client_configuration_set_stats_interval_in_seconds(
        conf: *mut pulsar_client_configuration_t,
        interval: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_is_validate_hostname(
        conf: *mut pulsar_client_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_client_configuration_set_validate_hostname(
        conf: *mut pulsar_client_configuration_t,
        validateHostName: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_client_configuration_get_stats_interval_in_seconds(
        conf: *mut pulsar_client_configuration_t,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_string_map {
    _unused: [u8; 0],
}
pub type pulsar_string_map_t = _pulsar_string_map;
extern "C" {
    pub fn pulsar_string_map_create() -> *mut pulsar_string_map_t;
}
extern "C" {
    pub fn pulsar_string_map_free(map: *mut pulsar_string_map_t);
}
extern "C" {
    pub fn pulsar_string_map_size(map: *mut pulsar_string_map_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_string_map_put(
        map: *mut pulsar_string_map_t,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_string_map_get(
        map: *mut pulsar_string_map_t,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_string_map_get_key(
        map: *mut pulsar_string_map_t,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_string_map_get_value(
        map: *mut pulsar_string_map_t,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_message {
    _unused: [u8; 0],
}
pub type pulsar_message_t = _pulsar_message;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_message_id {
    _unused: [u8; 0],
}
pub type pulsar_message_id_t = _pulsar_message_id;
extern "C" {
    pub fn pulsar_message_create() -> *mut pulsar_message_t;
}
extern "C" {
    pub fn pulsar_message_free(message: *mut pulsar_message_t);
}
extern "C" {
    pub fn pulsar_message_set_content(
        message: *mut pulsar_message_t,
        data: *const ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    pub fn pulsar_message_set_allocated_content(
        message: *mut pulsar_message_t,
        data: *mut ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    pub fn pulsar_message_set_property(
        message: *mut pulsar_message_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_message_set_partition_key(
        message: *mut pulsar_message_t,
        partitionKey: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_message_set_ordering_key(
        message: *mut pulsar_message_t,
        orderingKey: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_message_set_event_timestamp(message: *mut pulsar_message_t, eventTimestamp: u64);
}
extern "C" {
    pub fn pulsar_message_set_sequence_id(message: *mut pulsar_message_t, sequenceId: i64);
}
extern "C" {
    pub fn pulsar_message_set_deliver_after(message: *mut pulsar_message_t, delayMillis: u64);
}
extern "C" {
    pub fn pulsar_message_set_deliver_at(
        message: *mut pulsar_message_t,
        deliveryTimestampMillis: u64,
    );
}
extern "C" {
    pub fn pulsar_message_set_replication_clusters(
        message: *mut pulsar_message_t,
        clusters: *mut *const ::std::os::raw::c_char,
        size: usize,
    );
}
extern "C" {
    pub fn pulsar_message_disable_replication(
        message: *mut pulsar_message_t,
        flag: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_message_get_properties(
        message: *mut pulsar_message_t,
    ) -> *mut pulsar_string_map_t;
}
extern "C" {
    pub fn pulsar_message_has_property(
        message: *mut pulsar_message_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_message_get_property(
        message: *mut pulsar_message_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_message_get_data(message: *mut pulsar_message_t)
        -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn pulsar_message_get_length(message: *mut pulsar_message_t) -> u32;
}
extern "C" {
    pub fn pulsar_message_get_message_id(
        message: *mut pulsar_message_t,
    ) -> *mut pulsar_message_id_t;
}
extern "C" {
    pub fn pulsar_message_get_partitionKey(
        message: *mut pulsar_message_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_message_has_partition_key(
        message: *mut pulsar_message_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_message_get_orderingKey(
        message: *mut pulsar_message_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_message_has_ordering_key(message: *mut pulsar_message_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_message_get_publish_timestamp(message: *mut pulsar_message_t) -> u64;
}
extern "C" {
    pub fn pulsar_message_get_event_timestamp(message: *mut pulsar_message_t) -> u64;
}
extern "C" {
    pub fn pulsar_message_get_topic_name(
        message: *mut pulsar_message_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_message_get_redelivery_count(
        message: *mut pulsar_message_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_message_has_schema_version(
        message: *mut pulsar_message_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_message_get_schemaVersion(
        message: *mut pulsar_message_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_message_set_schema_version(
        message: *mut pulsar_message_t,
        schemaVersion: *const ::std::os::raw::c_char,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pulsar_result {
    pulsar_result_Ok = 0,
    pulsar_result_UnknownError = 1,
    pulsar_result_InvalidConfiguration = 2,
    pulsar_result_Timeout = 3,
    pulsar_result_LookupError = 4,
    pulsar_result_ConnectError = 5,
    pulsar_result_ReadError = 6,
    pulsar_result_AuthenticationError = 7,
    pulsar_result_AuthorizationError = 8,
    pulsar_result_ErrorGettingAuthenticationData = 9,
    pulsar_result_BrokerMetadataError = 10,
    pulsar_result_BrokerPersistenceError = 11,
    pulsar_result_ChecksumError = 12,
    pulsar_result_ConsumerBusy = 13,
    pulsar_result_NotConnected = 14,
    pulsar_result_AlreadyClosed = 15,
    pulsar_result_InvalidMessage = 16,
    pulsar_result_ConsumerNotInitialized = 17,
    pulsar_result_ProducerNotInitialized = 18,
    pulsar_result_ProducerBusy = 19,
    pulsar_result_TooManyLookupRequestException = 20,
    pulsar_result_InvalidTopicName = 21,
    pulsar_result_InvalidUrl = 22,
    pulsar_result_ServiceUnitNotReady = 23,
    pulsar_result_OperationNotSupported = 24,
    pulsar_result_ProducerBlockedQuotaExceededError = 25,
    pulsar_result_ProducerBlockedQuotaExceededException = 26,
    pulsar_result_ProducerQueueIsFull = 27,
    pulsar_result_MessageTooBig = 28,
    pulsar_result_TopicNotFound = 29,
    pulsar_result_SubscriptionNotFound = 30,
    pulsar_result_ConsumerNotFound = 31,
    pulsar_result_UnsupportedVersionError = 32,
    pulsar_result_TopicTerminated = 33,
    pulsar_result_CryptoError = 34,
    pulsar_result_IncompatibleSchema = 35,
    pulsar_result_ConsumerAssignError = 36,
    pulsar_result_CumulativeAcknowledgementNotAllowedError = 37,
    pulsar_result_TransactionCoordinatorNotFoundError = 38,
    pulsar_result_InvalidTxnStatusError = 39,
    pulsar_result_NotAllowedError = 40,
    pulsar_result_TransactionConflict = 41,
    pulsar_result_TransactionNotFound = 42,
    pulsar_result_ProducerFenced = 43,
    pulsar_result_MemoryBufferIsFull = 44,
    pulsar_result_Interrupted = 45,
}
extern "C" {
    pub fn pulsar_result_str(result: pulsar_result) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_consumer {
    _unused: [u8; 0],
}
pub type pulsar_consumer_t = _pulsar_consumer;
pub type pulsar_result_callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: pulsar_result, arg2: *mut ::std::os::raw::c_void),
>;
pub type pulsar_receive_callback = ::std::option::Option<
    unsafe extern "C" fn(
        result: pulsar_result,
        msg: *mut pulsar_message_t,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pulsar_consumer_get_topic(
        consumer: *mut pulsar_consumer_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_consumer_get_subscription_name(
        consumer: *mut pulsar_consumer_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_consumer_unsubscribe(consumer: *mut pulsar_consumer_t) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_unsubscribe_async(
        consumer: *mut pulsar_consumer_t,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_receive(
        consumer: *mut pulsar_consumer_t,
        msg: *mut *mut pulsar_message_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_receive_with_timeout(
        consumer: *mut pulsar_consumer_t,
        msg: *mut *mut pulsar_message_t,
        timeoutMs: ::std::os::raw::c_int,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_receive_async(
        consumer: *mut pulsar_consumer_t,
        callback: pulsar_receive_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_acknowledge(
        consumer: *mut pulsar_consumer_t,
        message: *mut pulsar_message_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_acknowledge_id(
        consumer: *mut pulsar_consumer_t,
        messageId: *mut pulsar_message_id_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_acknowledge_async(
        consumer: *mut pulsar_consumer_t,
        message: *mut pulsar_message_t,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_acknowledge_async_id(
        consumer: *mut pulsar_consumer_t,
        messageId: *mut pulsar_message_id_t,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_acknowledge_cumulative(
        consumer: *mut pulsar_consumer_t,
        message: *mut pulsar_message_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_acknowledge_cumulative_id(
        consumer: *mut pulsar_consumer_t,
        messageId: *mut pulsar_message_id_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_acknowledge_cumulative_async(
        consumer: *mut pulsar_consumer_t,
        message: *mut pulsar_message_t,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_acknowledge_cumulative_async_id(
        consumer: *mut pulsar_consumer_t,
        messageId: *mut pulsar_message_id_t,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_negative_acknowledge(
        consumer: *mut pulsar_consumer_t,
        message: *mut pulsar_message_t,
    );
}
extern "C" {
    pub fn pulsar_consumer_negative_acknowledge_id(
        consumer: *mut pulsar_consumer_t,
        messageId: *mut pulsar_message_id_t,
    );
}
extern "C" {
    pub fn pulsar_consumer_close(consumer: *mut pulsar_consumer_t) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_close_async(
        consumer: *mut pulsar_consumer_t,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_free(consumer: *mut pulsar_consumer_t);
}
extern "C" {
    pub fn pulsar_consumer_pause_message_listener(
        consumer: *mut pulsar_consumer_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_redeliver_unacknowledged_messages(consumer: *mut pulsar_consumer_t);
}
extern "C" {
    pub fn pulsar_consumer_seek_async(
        consumer: *mut pulsar_consumer_t,
        messageId: *mut pulsar_message_id_t,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_seek(
        consumer: *mut pulsar_consumer_t,
        messageId: *mut pulsar_message_id_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_seek_by_timestamp_async(
        consumer: *mut pulsar_consumer_t,
        timestamp: u64,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_seek_by_timestamp(
        consumer: *mut pulsar_consumer_t,
        timestamp: u64,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_consumer_is_connected(consumer: *mut pulsar_consumer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_get_last_message_id(
        consumer: *mut pulsar_consumer_t,
        messageId: *mut pulsar_message_id_t,
    ) -> pulsar_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_topic_metadata {
    _unused: [u8; 0],
}
pub type pulsar_topic_metadata_t = _pulsar_topic_metadata;
pub type pulsar_message_router = ::std::option::Option<
    unsafe extern "C" fn(
        msg: *mut pulsar_message_t,
        topicMetadata: *mut pulsar_topic_metadata_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pulsar_topic_metadata_get_num_partitions(
        topicMetadata: *mut pulsar_topic_metadata_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pulsar_partitions_routing_mode {
    pulsar_UseSinglePartition = 0,
    pulsar_RoundRobinDistribution = 1,
    pulsar_CustomPartition = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pulsar_hashing_scheme {
    pulsar_Murmur3_32Hash = 0,
    pulsar_BoostHash = 1,
    pulsar_JavaStringHash = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pulsar_compression_type {
    pulsar_CompressionNone = 0,
    pulsar_CompressionLZ4 = 1,
    pulsar_CompressionZLib = 2,
    pulsar_CompressionZSTD = 3,
    pulsar_CompressionSNAPPY = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pulsar_schema_type {
    pulsar_None = 0,
    pulsar_String = 1,
    pulsar_Json = 2,
    pulsar_Protobuf = 3,
    pulsar_Avro = 4,
    pulsar_Boolean = 5,
    pulsar_Int8 = 6,
    pulsar_Int16 = 7,
    pulsar_Int32 = 8,
    pulsar_Int64 = 9,
    pulsar_Float32 = 10,
    pulsar_Float64 = 11,
    pulsar_KeyValue = 15,
    pulsar_Bytes = -1,
    pulsar_AutoConsume = -3,
    pulsar_AutoPublish = -4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pulsar_producer_crypto_failure_action {
    pulsar_ProducerFail = 0,
    pulsar_ProducerSend = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_producer_configuration {
    _unused: [u8; 0],
}
pub type pulsar_producer_configuration_t = _pulsar_producer_configuration;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_crypto_key_reader {
    _unused: [u8; 0],
}
pub type pulsar_crypto_key_reader = _pulsar_crypto_key_reader;
extern "C" {
    pub fn pulsar_producer_configuration_create() -> *mut pulsar_producer_configuration_t;
}
extern "C" {
    pub fn pulsar_producer_configuration_free(conf: *mut pulsar_producer_configuration_t);
}
extern "C" {
    pub fn pulsar_producer_configuration_set_producer_name(
        conf: *mut pulsar_producer_configuration_t,
        producerName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_producer_name(
        conf: *mut pulsar_producer_configuration_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_send_timeout(
        conf: *mut pulsar_producer_configuration_t,
        sendTimeoutMs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_send_timeout(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_initial_sequence_id(
        conf: *mut pulsar_producer_configuration_t,
        initialSequenceId: i64,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_initial_sequence_id(
        conf: *mut pulsar_producer_configuration_t,
    ) -> i64;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_compression_type(
        conf: *mut pulsar_producer_configuration_t,
        compressionType: pulsar_compression_type,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_compression_type(
        conf: *mut pulsar_producer_configuration_t,
    ) -> pulsar_compression_type;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_schema_info(
        conf: *mut pulsar_producer_configuration_t,
        schemaType: pulsar_schema_type,
        name: *const ::std::os::raw::c_char,
        schema: *const ::std::os::raw::c_char,
        properties: *mut pulsar_string_map_t,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_set_max_pending_messages(
        conf: *mut pulsar_producer_configuration_t,
        maxPendingMessages: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_max_pending_messages(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_max_pending_messages_across_partitions(
        conf: *mut pulsar_producer_configuration_t,
        maxPendingMessagesAcrossPartitions: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_max_pending_messages_across_partitions(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_partitions_routing_mode(
        conf: *mut pulsar_producer_configuration_t,
        mode: pulsar_partitions_routing_mode,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_partitions_routing_mode(
        conf: *mut pulsar_producer_configuration_t,
    ) -> pulsar_partitions_routing_mode;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_message_router(
        conf: *mut pulsar_producer_configuration_t,
        router: pulsar_message_router,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_set_hashing_scheme(
        conf: *mut pulsar_producer_configuration_t,
        scheme: pulsar_hashing_scheme,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_hashing_scheme(
        conf: *mut pulsar_producer_configuration_t,
    ) -> pulsar_hashing_scheme;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_lazy_start_partitioned_producers(
        conf: *mut pulsar_producer_configuration_t,
        useLazyStartPartitionedProducers: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_lazy_start_partitioned_producers(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_block_if_queue_full(
        conf: *mut pulsar_producer_configuration_t,
        blockIfQueueFull: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_block_if_queue_full(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_batching_enabled(
        conf: *mut pulsar_producer_configuration_t,
        batchingEnabled: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_batching_enabled(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_batching_max_messages(
        conf: *mut pulsar_producer_configuration_t,
        batchingMaxMessages: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_batching_max_messages(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_batching_max_allowed_size_in_bytes(
        conf: *mut pulsar_producer_configuration_t,
        batchingMaxAllowedSizeInBytes: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_batching_max_allowed_size_in_bytes(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_batching_max_publish_delay_ms(
        conf: *mut pulsar_producer_configuration_t,
        batchingMaxPublishDelayMs: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_batching_max_publish_delay_ms(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_property(
        conf: *mut pulsar_producer_configuration_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_producer_is_encryption_enabled(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_default_crypto_key_reader(
        conf: *mut pulsar_producer_configuration_t,
        public_key_path: *const ::std::os::raw::c_char,
        private_key_path: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_get_crypto_failure_action(
        conf: *mut pulsar_producer_configuration_t,
    ) -> pulsar_producer_crypto_failure_action;
}
extern "C" {
    pub fn pulsar_producer_configuration_set_crypto_failure_action(
        conf: *mut pulsar_producer_configuration_t,
        cryptoFailureAction: pulsar_producer_crypto_failure_action,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_set_encryption_key(
        conf: *mut pulsar_producer_configuration_t,
        key: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_set_chunking_enabled(
        conf: *mut pulsar_producer_configuration_t,
        chunkingEnabled: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_producer_configuration_is_chunking_enabled(
        conf: *mut pulsar_producer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_consumer_configuration {
    _unused: [u8; 0],
}
pub type pulsar_consumer_configuration_t = _pulsar_consumer_configuration;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pulsar_consumer_type {
    pulsar_ConsumerExclusive = 0,
    pulsar_ConsumerShared = 1,
    pulsar_ConsumerFailover = 2,
    pulsar_ConsumerKeyShared = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum initial_position {
    initial_position_latest = 0,
    initial_position_earliest = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum pulsar_consumer_crypto_failure_action {
    pulsar_ConsumerFail = 0,
    pulsar_ConsumerDiscard = 1,
    pulsar_ConsumerConsume = 2,
}
pub type pulsar_message_listener = ::std::option::Option<
    unsafe extern "C" fn(
        consumer: *mut pulsar_consumer_t,
        msg: *mut pulsar_message_t,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pulsar_consumer_configuration_create() -> *mut pulsar_consumer_configuration_t;
}
extern "C" {
    pub fn pulsar_consumer_configuration_free(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_consumer_type(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        consumerType: pulsar_consumer_type,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_get_consumer_type(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> pulsar_consumer_type;
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_schema_info(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        schemaType: pulsar_schema_type,
        name: *const ::std::os::raw::c_char,
        schema: *const ::std::os::raw::c_char,
        properties: *mut pulsar_string_map_t,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_message_listener(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        messageListener: pulsar_message_listener,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_has_message_listener(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_receiver_queue_size(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_get_receiver_queue_size(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_set_max_total_receiver_queue_size_across_partitions(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        maxTotalReceiverQueueSizeAcrossPartitions: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_consumer_get_max_total_receiver_queue_size_across_partitions(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_set_consumer_name(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        consumerName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_consumer_get_consumer_name(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_consumer_set_unacked_messages_timeout_ms(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        milliSeconds: u64,
    );
}
extern "C" {
    pub fn pulsar_consumer_get_unacked_messages_timeout_ms(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pulsar_configure_set_negative_ack_redelivery_delay_ms(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        redeliveryDelayMillis: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn pulsar_configure_get_negative_ack_redelivery_delay_ms(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pulsar_configure_set_ack_grouping_time_ms(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        ackGroupingMillis: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn pulsar_configure_get_ack_grouping_time_ms(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pulsar_configure_set_ack_grouping_max_size(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        maxGroupingSize: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn pulsar_configure_get_ack_grouping_max_size(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pulsar_consumer_is_encryption_enabled(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_default_crypto_key_reader(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        public_key_path: *const ::std::os::raw::c_char,
        private_key_path: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_get_crypto_failure_action(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> pulsar_consumer_crypto_failure_action;
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_crypto_failure_action(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        cryptoFailureAction: pulsar_consumer_crypto_failure_action,
    );
}
extern "C" {
    pub fn pulsar_consumer_is_read_compacted(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_set_read_compacted(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        compacted: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_consumer_get_subscription_initial_position(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_set_subscription_initial_position(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        subscriptionInitialPosition: initial_position,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_property(
        conf: *mut pulsar_consumer_configuration_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_priority_level(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        priority_level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_get_priority_level(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_max_pending_chunked_message(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        max_pending_chunked_message: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_get_max_pending_chunked_message(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_auto_ack_oldest_chunked_message_on_queue_full(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        auto_ack_oldest_chunked_message_on_queue_full: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_is_auto_ack_oldest_chunked_message_on_queue_full(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_consumer_configuration_set_start_message_id_inclusive(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
        start_message_id_inclusive: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_consumer_configuration_is_start_message_id_inclusive(
        consumer_configuration: *mut pulsar_consumer_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_message_id_earliest() -> *const pulsar_message_id_t;
}
extern "C" {
    pub fn pulsar_message_id_latest() -> *const pulsar_message_id_t;
}
extern "C" {
    pub fn pulsar_message_id_serialize(
        messageId: *mut pulsar_message_id_t,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pulsar_message_id_deserialize(
        buffer: *const ::std::os::raw::c_void,
        len: u32,
    ) -> *mut pulsar_message_id_t;
}
extern "C" {
    pub fn pulsar_message_id_str(
        messageId: *mut pulsar_message_id_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_message_id_free(messageId: *mut pulsar_message_id_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_producer {
    _unused: [u8; 0],
}
pub type pulsar_producer_t = _pulsar_producer;
pub type pulsar_send_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: pulsar_result,
        msgId: *mut pulsar_message_id_t,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
pub type pulsar_close_callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: pulsar_result, ctx: *mut ::std::os::raw::c_void),
>;
pub type pulsar_flush_callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: pulsar_result, ctx: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn pulsar_producer_get_topic(
        producer: *mut pulsar_producer_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_producer_get_producer_name(
        producer: *mut pulsar_producer_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_producer_send(
        producer: *mut pulsar_producer_t,
        msg: *mut pulsar_message_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_producer_send_async(
        producer: *mut pulsar_producer_t,
        msg: *mut pulsar_message_t,
        callback: pulsar_send_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_producer_get_last_sequence_id(producer: *mut pulsar_producer_t) -> i64;
}
extern "C" {
    pub fn pulsar_producer_close(producer: *mut pulsar_producer_t) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_producer_close_async(
        producer: *mut pulsar_producer_t,
        callback: pulsar_close_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_producer_flush(producer: *mut pulsar_producer_t) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_producer_flush_async(
        producer: *mut pulsar_producer_t,
        callback: pulsar_flush_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_producer_free(producer: *mut pulsar_producer_t);
}
extern "C" {
    pub fn pulsar_producer_is_connected(producer: *mut pulsar_producer_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_reader {
    _unused: [u8; 0],
}
pub type pulsar_reader_t = _pulsar_reader;
extern "C" {
    pub fn pulsar_reader_get_topic(reader: *mut pulsar_reader_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_reader_read_next(
        reader: *mut pulsar_reader_t,
        msg: *mut *mut pulsar_message_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_reader_read_next_with_timeout(
        reader: *mut pulsar_reader_t,
        msg: *mut *mut pulsar_message_t,
        timeoutMs: ::std::os::raw::c_int,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_reader_seek_async(
        reader: *mut pulsar_reader_t,
        messageId: *mut pulsar_message_id_t,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_reader_seek(
        reader: *mut pulsar_reader_t,
        messageId: *mut pulsar_message_id_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_reader_seek_by_timestamp_async(
        reader: *mut pulsar_reader_t,
        timestamp: u64,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_reader_seek_by_timestamp(
        reader: *mut pulsar_reader_t,
        timestamp: u64,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_reader_close(reader: *mut pulsar_reader_t) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_reader_close_async(
        reader: *mut pulsar_reader_t,
        callback: pulsar_result_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_reader_free(reader: *mut pulsar_reader_t);
}
extern "C" {
    pub fn pulsar_reader_has_message_available(
        reader: *mut pulsar_reader_t,
        available: *mut ::std::os::raw::c_int,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_reader_is_connected(reader: *mut pulsar_reader_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_reader_configuration {
    _unused: [u8; 0],
}
pub type pulsar_reader_configuration_t = _pulsar_reader_configuration;
pub type pulsar_reader_listener = ::std::option::Option<
    unsafe extern "C" fn(
        reader: *mut pulsar_reader_t,
        msg: *mut pulsar_message_t,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pulsar_reader_configuration_create() -> *mut pulsar_reader_configuration_t;
}
extern "C" {
    pub fn pulsar_reader_configuration_free(configuration: *mut pulsar_reader_configuration_t);
}
extern "C" {
    pub fn pulsar_reader_configuration_set_reader_listener(
        configuration: *mut pulsar_reader_configuration_t,
        listener: pulsar_reader_listener,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_reader_configuration_has_reader_listener(
        configuration: *mut pulsar_reader_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_reader_configuration_set_receiver_queue_size(
        configuration: *mut pulsar_reader_configuration_t,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_reader_configuration_get_receiver_queue_size(
        configuration: *mut pulsar_reader_configuration_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_reader_configuration_set_reader_name(
        configuration: *mut pulsar_reader_configuration_t,
        readerName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_reader_configuration_get_reader_name(
        configuration: *mut pulsar_reader_configuration_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_reader_configuration_set_subscription_role_prefix(
        configuration: *mut pulsar_reader_configuration_t,
        subscriptionRolePrefix: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_reader_configuration_get_subscription_role_prefix(
        configuration: *mut pulsar_reader_configuration_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pulsar_reader_configuration_set_read_compacted(
        configuration: *mut pulsar_reader_configuration_t,
        readCompacted: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pulsar_reader_configuration_is_read_compacted(
        configuration: *mut pulsar_reader_configuration_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_string_list {
    _unused: [u8; 0],
}
pub type pulsar_string_list_t = _pulsar_string_list;
extern "C" {
    pub fn pulsar_string_list_create() -> *mut pulsar_string_list_t;
}
extern "C" {
    pub fn pulsar_string_list_free(list: *mut pulsar_string_list_t);
}
extern "C" {
    pub fn pulsar_string_list_size(list: *mut pulsar_string_list_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pulsar_string_list_append(
        list: *mut pulsar_string_list_t,
        item: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pulsar_string_list_get(
        map: *mut pulsar_string_list_t,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pulsar_client {
    _unused: [u8; 0],
}
pub type pulsar_client_t = _pulsar_client;
pub type pulsar_create_producer_callback = ::std::option::Option<
    unsafe extern "C" fn(
        result: pulsar_result,
        producer: *mut pulsar_producer_t,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
pub type pulsar_subscribe_callback = ::std::option::Option<
    unsafe extern "C" fn(
        result: pulsar_result,
        consumer: *mut pulsar_consumer_t,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
pub type pulsar_reader_callback = ::std::option::Option<
    unsafe extern "C" fn(
        result: pulsar_result,
        reader: *mut pulsar_reader_t,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
pub type pulsar_get_partitions_callback = ::std::option::Option<
    unsafe extern "C" fn(
        result: pulsar_result,
        partitions: *mut pulsar_string_list_t,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pulsar_client_create(
        serviceUrl: *const ::std::os::raw::c_char,
        clientConfiguration: *const pulsar_client_configuration_t,
    ) -> *mut pulsar_client_t;
}
extern "C" {
    pub fn pulsar_client_create_producer(
        client: *mut pulsar_client_t,
        topic: *const ::std::os::raw::c_char,
        conf: *const pulsar_producer_configuration_t,
        producer: *mut *mut pulsar_producer_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_client_create_producer_async(
        client: *mut pulsar_client_t,
        topic: *const ::std::os::raw::c_char,
        conf: *const pulsar_producer_configuration_t,
        callback: pulsar_create_producer_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_client_subscribe(
        client: *mut pulsar_client_t,
        topic: *const ::std::os::raw::c_char,
        subscriptionName: *const ::std::os::raw::c_char,
        conf: *const pulsar_consumer_configuration_t,
        consumer: *mut *mut pulsar_consumer_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_client_subscribe_async(
        client: *mut pulsar_client_t,
        topic: *const ::std::os::raw::c_char,
        subscriptionName: *const ::std::os::raw::c_char,
        conf: *const pulsar_consumer_configuration_t,
        callback: pulsar_subscribe_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_client_subscribe_multi_topics(
        client: *mut pulsar_client_t,
        topics: *mut *const ::std::os::raw::c_char,
        topicsCount: ::std::os::raw::c_int,
        subscriptionName: *const ::std::os::raw::c_char,
        conf: *const pulsar_consumer_configuration_t,
        consumer: *mut *mut pulsar_consumer_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_client_subscribe_multi_topics_async(
        client: *mut pulsar_client_t,
        topics: *mut *const ::std::os::raw::c_char,
        topicsCount: ::std::os::raw::c_int,
        subscriptionName: *const ::std::os::raw::c_char,
        conf: *const pulsar_consumer_configuration_t,
        callback: pulsar_subscribe_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_client_subscribe_pattern(
        client: *mut pulsar_client_t,
        topicPattern: *const ::std::os::raw::c_char,
        subscriptionName: *const ::std::os::raw::c_char,
        conf: *const pulsar_consumer_configuration_t,
        consumer: *mut *mut pulsar_consumer_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_client_subscribe_pattern_async(
        client: *mut pulsar_client_t,
        topicPattern: *const ::std::os::raw::c_char,
        subscriptionName: *const ::std::os::raw::c_char,
        conf: *const pulsar_consumer_configuration_t,
        callback: pulsar_subscribe_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_client_create_reader(
        client: *mut pulsar_client_t,
        topic: *const ::std::os::raw::c_char,
        startMessageId: *const pulsar_message_id_t,
        conf: *mut pulsar_reader_configuration_t,
        reader: *mut *mut pulsar_reader_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_client_create_reader_async(
        client: *mut pulsar_client_t,
        topic: *const ::std::os::raw::c_char,
        startMessageId: *const pulsar_message_id_t,
        conf: *mut pulsar_reader_configuration_t,
        callback: pulsar_reader_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_client_get_topic_partitions(
        client: *mut pulsar_client_t,
        topic: *const ::std::os::raw::c_char,
        partitions: *mut *mut pulsar_string_list_t,
    ) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_client_get_topic_partitions_async(
        client: *mut pulsar_client_t,
        topic: *const ::std::os::raw::c_char,
        callback: pulsar_get_partitions_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_client_close(client: *mut pulsar_client_t) -> pulsar_result;
}
extern "C" {
    pub fn pulsar_client_close_async(
        client: *mut pulsar_client_t,
        callback: pulsar_close_callback,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pulsar_client_free(client: *mut pulsar_client_t);
}
