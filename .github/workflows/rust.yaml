name: Rust

on:
  push:
    branches:
      - ci/*
      - main
      - develop
      - release/*
      - staging
  pull_request:
    paths:
      - "**/Cargo.toml"
      - "**/src/**"
      - ".github/**"
      - Cargo.lock
      - Cargo.toml
      - deny.toml
      - rust-toolchain.toml
      - rustfmt.toml
      - tarpaulin.toml

env:
  CI: 1
  # Rust toolchain
  NIGHTLY_TOOLCHAIN: nightly-2023-05-25
  CARGO_TERM_COLOR: always
  CARGO_ARGS: --workspace --bins --examples --tests --benches --all-targets --all-features

concurrency:
  group: rust-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rustfmt:
    name: Check rust format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          override: true
          components: rustfmt

      - name: cargo fmt --version
        run: |
          cargo fmt --version

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --verbose --check

  udeps:
    name: Check unused dependencies
    runs-on: ubuntu-latest
    needs:
      - rustfmt
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Install dependencies
        run: |
          sudo ./dev-support/bin/install-deps

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          override: true
          components: rustfmt

      - name: Setup Sccache
        uses: ./.github/actions/sccache

      - name: Run cargo-udeps
        uses: aig787/cargo-udeps-action@v1
        env:
          CARGO_BUILD_RUSTC_WRAPPER: sccache
        with:
          version: latest
          args: ${{ env.CARGO_ARGS }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs:
      - rustfmt
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Install dependencies
        run: |
          sudo ./dev-support/bin/install-deps

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          override: true
          components: clippy,rustfmt

      - name: Setup Sccache
        uses: ./.github/actions/sccache

      - name: cargo clippy --version
        run: |
          cargo clippy --version

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        env:
          CARGO_BUILD_RUSTC_WRAPPER: sccache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: ${{ env.CARGO_ARGS }}

  test:
    name: Test
    runs-on: ubuntu-latest
    needs:
      - clippy
      - udeps
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          # - beta
          # - nightly
        mode:
          - debug
          - release
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Install dependencies
        run: |
          sudo ./dev-support/bin/install-deps

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain == 'nightly' && env.NIGHTLY_TOOLCHAIN || matrix.toolchain }}
          profile: minimal
          override: true
          components: rustfmt

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Setup Sccache
        uses: ./.github/actions/sccache

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        env:
          CARGO_BUILD_RUSTC_WRAPPER: sccache
        with:
          command: nextest
          args: run ${{ env.CARGO_ARGS }} --no-fail-fast ${{ matrix.mode == 'release' && '--release' || '' }}

  miri:
    name: Miri
    runs-on: ubuntu-latest
    needs:
      - clippy
      - udeps
    env:
      CARGO_BUILD_RUSTC_WRAPPER: ""
      MIRIFLAGS: -Zmiri-symbolic-alignment-check
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          # - stable
          # - beta
          - nightly
        mode:
          # - debug
          - release
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Install dependencies
        run: |
          sudo ./dev-support/bin/install-deps

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain == 'nightly' && env.NIGHTLY_TOOLCHAIN || matrix.toolchain }}
          override: true
          components: miri,rust-src

      - name: cargo miri --version
        run: |
          cargo miri setup
          cargo miri --version

      - name: Run cargo miri
        uses: actions-rs/cargo@v1
        with:
          command: miri
          args: test --workspace --no-fail-fast ${{ matrix.mode == 'release' && '--release' || '' }} -- --nocapture

  doc:
    name: Doc
    runs-on: ubuntu-latest
    needs:
      - clippy
      - udeps
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Install dependencies
        run: |
          sudo ./dev-support/bin/install-deps

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          override: true
          components: clippy,rustfmt

      - name: Sccache
        uses: ./.github/actions/sccache

      - name: Run cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --workspace --no-deps --bins --all-features

  # coverage:
  #   name: Coverage
  #   runs-on: ubuntu-latest
  #   needs:
  #     - clippy
  #     - udeps
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         sudo ./dev-support/bin/install-deps

  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
  #         override: true
  #         components: rustfmt

  #     - name: Pre Cache
  #       run: |
  #         rm -rf ~/.cargo/registry/index/ ~/.cargo/registry/cache/ ~/.cargo/git/db/

  #     - name: Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  #     - name: Run cargo tarpaulin
  #       uses: actions-rs/tarpaulin@v0.1

  #     - name: Upload to Codecov
  #       uses: codecov/codecov-action@v3.1.0
  #       env:
  #         TOOLCHAIN: ${{ env.NIGHTLY_TOOLCHAIN }}
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         env_vars: TOOLCHAIN
  #         flags: unittests
  #         fail_ci_if_error: true
